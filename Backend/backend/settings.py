"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from datetime import timedelta
from operator import truediv
from pathlib import Path

import os
import datetime

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1ki=yfzp98swdev0tk75ua6030ee$y^@+1%29!n))b)9k*6j69'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api.apps.ApiConfig',
    'authapp.apps.AuthappConfig',
    "adminapp.apps.AdminappConfig",
    'rest_framework',
    # 'cloudinary_storage',
    # 'cloudinary',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'drf_yasg',
]
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
    
# }

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'PFE_DB',
        'CLIENT': {
            'host': 'mongodb+srv://medfarouk55:xbox121254@cluster0.6wlcu.mongodb.net/myFirstDatabase?retryWrites=true&w=majority',
            'authMechanism' : 'SCRAM-SHA-1'
        }
    }
}

AUTH_USER_MODEL = 'authapp.User'


REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'NON_FIELD_ERRORS_KEY': 'error',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=1000),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=90),
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True

ALLOWED_HOSTS = ['10.0.2.2', 'localhost', '127.0.0.1' ,'54cb-197-25-190-135.ngrok.io'  ]

MEDIA_ROOT = os.path.join(BASE_DIR, '').replace('\\', '/')
MEDIA_URL = '/media/'
# DEFAULT_FILE_STORAGE = "cloudinary-storage.storage.MediaCloudinary"
# DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# CLOUDINARY_STORAGE = {
#     'CLOUD_NAME' : "dkfmfp6dr", 
#     'API_KEY' : "215292675363334", 
#     'API_SECRET' : "Rza0LBYShuQ6lOkuuy2AXS-W2j4"

# }




# DEFAULT_FILE_STORAGE = 'storages.backends.dropbox.DropBoxStorage'

# DROPBOX_OAUTH2_TOKEN = 'sl.BJMljJrNcmA4ll-V3hehXuGFjnFAzsimHPRbid3v5A0w3Cz1lhaAvSdGb9PJaXezzJv2JNfudEdeVExr-EzTErhmh-2a7MRS0xzzjHzcJ5lNI2Aoz7CWbkwGE89VLpnshJgS9zk'

# DROPBOX_CONSUMER_KEY = 'pv4nz0tgu6iro9s'

# DROPBOX_CONSUMER_SECRET = 'ebckuatzf36iu8w'

# DROPBOX_ROOT_FOLDER = '/Public'